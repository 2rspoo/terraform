name: 'Terraform CI/CD'

# Gatilhos do workflow
on:
  # Aciona em pushes para a branch 'main' (ap√≥s um merge de PR)
  push:
    branches:
      - main
  # Aciona tamb√©m na cria√ß√£o ou atualiza√ß√£o de Pull Requests
  pull_request:

permissions:
  id-token: write   # Necess√°rio para autentica√ß√£o OIDC com a AWS
  contents: read    # Para fazer o checkout do c√≥digo
  pull-requests: write # Para poder comentar o 'plan' no PR

jobs:
  # Este job roda para Pull Requests
  terraform-plan:
    name: 'Terraform Plan'
    # Condi√ß√£o: S√≥ executa este job se o evento for um 'pull_request'
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        # Passa a senha do banco como uma vari√°vel de linha de comando, lendo do secret
        run: terraform plan -no-color -input=false
        continue-on-error: true # Permite que o workflow continue para postar o resultado mesmo se o plan falhar

      # Opcional, mas muito recomendado: Comenta o resultado do 'plan' no PR
      - name: Update PR with Plan
        uses: actions/github-script@v6
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>
            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
            </details>
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${{ steps.plan.outputs.stdout }}
            \`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  # Este job roda AP√ìS o merge na 'main'
  terraform-apply:
    name: 'Terraform Apply'
    # Condi√ß√£o: S√≥ executa se o evento for um 'push' para a branch 'main'
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        # O -auto-approve √© seguro aqui, pois o 'plan' j√° foi validado no PR
        run: terraform apply -auto-approve -input=false